@startuml unsubscribe_sequence_diagram
actor Usuario
entity "NeswletterEmailSenderService" as EmailSenderService

participant "NewsletterController" as Controller
participant "NewsletterService" as Service
participant "TokenService" as TokenService
participant "EmailService" as EmailService
participant "SubscriberRepository" as Repo
participant "VerificationTokenRepository" as TokenRepo
participant "Unsubscribe landing page" as FrontendService

EmailSenderService -> Controller : GET /getUnsubscribeLink (email)
activate EmailSenderService
activate Controller
Controller -> Service : generateUnsubscribeLink(email)
activate Service
Service -> Repo : findByEmail(email) with status=ACTIVE
activate Repo
Repo --> Service : return Subscriber
deactivate Repo
Service -> TokenService : generates the UNSUBSCRIBE token
activate TokenService
TokenService -> TokenRepo : save the token
TokenService -> Service : return generated Token
deactivate TokenService
Service -> EmailService : generatedUnsubscribeLink(token)
activate EmailService
EmailService --> Service : return unsubscribe link
deactivate EmailService
Service --> Controller : return unsubscribe link
deactivate Service
Controller --> EmailSenderService : return unsubscribe link
deactivate Controller
EmailSenderService -> Usuario : Sends newsletters emails with personal unsubscribe link 
deactivate EmailSenderService
activate Usuario
Usuario -> Controller : GET with personal token unsubscribe link
deactivate Usuario

activate Controller
Controller -> FrontendService : re-directs to unsubscribe landing page
deactivate Controller

activate FrontendService
FrontendService -> Usuario : returns landing page with unsubscribe button and poll
deactivate FrontendService

activate Usuario
Usuario -> Controller : User fill in the poll and clic the unsubscribe button
deactivate Usuario
activate Controller 
Controller -> Service : Checks if the token is valid
activate Service
Service -> TokenService : findByToken(token) and check if not used, not expired and Unsubscribe type
activate TokenService
TokenService -> TokenRepo : findById(token)
activate TokenRepo
TokenRepo -> TokenService : return token
deactivate TokenRepo
TokenService --> Service : return token if valid or throw exception
deactivate TokenService

alt Token is correct
  Service -> Repo : change subscribe status to: UNSUBSCRIBE
  activate Repo
  Repo -> Service : return status
  deactivate Repo
  Service -> TokenService : invalidate the token (set used=true)
  activate TokenService
  TokenService -> TokenRepo : findById(token), set used=true and save
  activate TokenRepo
  TokenRepo --> TokenService : return updated token
  deactivate TokenRepo
  TokenService --> Service : return
  deactivate TokenService
  Service -> Controller : return status ok
  Controller -> FrontendService : return status ok
  activate FrontendService
  FrontendService -> Usuario : return UNSUBSCRIBED message
  deactivate FrontendService
else Token not correct
  Service -> Controller : return forbidden
  Controller -> FrontendService : return forbidden
  activate FrontendService
  FrontendService -> Usuario : return "Error"
  deactivate FrontendService
end

deactivate Service
deactivate Controller

@enduml
