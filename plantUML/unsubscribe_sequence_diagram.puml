@startuml unsubscribe_sequence_diagram
actor Usuario

participant "NewsletterController" as Controller
participant "NewsletterService" as Service
participant "Unsubscribe landing page" as FrontendService
participant "TokenService" as TokenService
participant "SubscriberRepository" as Repo
participant "VerificationTokenRepository" as TokenRepo

Usuario -> Controller : GET with personal token unsubscribe link
activate Usuario

activate Controller
Controller -> Service : Validates the token
activate Service
Service -> TokenService : findByToken(token) and check if not used, not expired and Unsubscribe type
activate TokenService
TokenService -> TokenRepo : findById(token)
activate TokenRepo
TokenRepo -> TokenService : return token
deactivate TokenRepo
TokenService --> Service : return token if valid or throw exception
deactivate TokenService
Service -> Controller : return status ok or forbidden
deactivate Service
alt Token is correct
  Controller -> FrontendService : re-directs to unsubscribe landing page
  activate FrontendService
  FrontendService -> Usuario : returns landing page with unsubscribe button and poll
  deactivate FrontendService
else Token not correct
  Controller -> FrontendService : re-directs to error page
  activate FrontendService
  FrontendService -> Usuario : returns "Error" page
  deactivate FrontendService
end
deactivate Controller

Usuario -> Controller : User fill in the poll and clic the unsubscribe button
deactivate Usuario
activate Controller 
Controller -> Service : Checks if the token is valid
activate Service
Service -> TokenService : findByToken(token) and check if not used, not expired and Unsubscribe type
activate TokenService
TokenService -> TokenRepo : findById(token)
activate TokenRepo
TokenRepo -> TokenService : return token
deactivate TokenRepo
TokenService --> Service : return token if valid or throw exception
deactivate TokenService

alt Token is correct
  Service -> Repo : change subscribe status to: UNSUBSCRIBE
  activate Repo
  Repo -> Service : return status
  deactivate Repo
  Service -> TokenService : invalidate the token (set used=true)
  activate TokenService
  TokenService -> TokenRepo : findById(token), set used=true and save
  activate TokenRepo
  TokenRepo --> TokenService : return updated token
  deactivate TokenRepo
  TokenService --> Service : return
  deactivate TokenService
  Service -> Controller : return status ok
  Controller -> FrontendService : return status ok
  activate FrontendService
  FrontendService -> Usuario : return UNSUBSCRIBED message
  deactivate FrontendService
else Token not correct
  Service -> Controller : return forbidden
  Controller -> FrontendService : return forbidden
  activate FrontendService
  FrontendService -> Usuario : return "Error"
  deactivate FrontendService
end

deactivate Service
deactivate Controller

@enduml
