@startuml subscribe_sequence_diagram
actor User

participant "NewsletterController" as Controller
participant "NewsletterService" as Service
participant "TokenService" as TokenService
participant "EmailService" as EmailService
participant "SubscriberRepository" as Repo
participant "VerificationTokenRepository" as TokenRepo

User -> Controller : POST /subscribe (email, userCreated)

activate Controller
Controller -> Service : subscribe(email, userCreated)
activate Service

Service -> Repo : findByEmail(email)
activate Repo
Repo --> Service : return if email exists or not
deactivate Repo

alt Email already subscribed and active
    Service --> Controller : "Already subscribed"
    Controller --> User : "Already subscribed"
else Email subscribed but PENDING
    Service -> TokenService : invalidateOldTokens(email)
    activate TokenService
    TokenService -> TokenRepo : findAll CONFIRMATION tokens by email and set used=true
    activate TokenRepo
    TokenRepo --> TokenService : return updated tokens
    deactivate TokenRepo
    TokenService --> Service : return
    deactivate TokenService
    Service -> TokenService : generateToken(CONFIRMATION)
    activate TokenService
    TokenService -> TokenRepo : save(token)
    activate TokenRepo
    TokenRepo --> TokenService : return saved token
    deactivate TokenRepo
    TokenService --> Service : return token
    deactivate TokenService
    Service -> EmailService : sendConfirmationEmail(email, token)
    Service --> Controller : "Confirmation email resent"
    Controller --> User : "Subscription pending confirmation"
else New email
    alt Email associated to already created user
    Service -> Repo : save(new Subscriber(status = ACTIVE))
    Service --> Controller : "Active subscription"
    Controller --> User : "Active subscription"

    else Email not associated to a user
    Service -> Repo : save(new Subscriber(status = PENDING))
    Service -> TokenService : generateToken(CONFIRMATION)
    activate TokenService
    TokenService -> TokenRepo : save(token)
    activate TokenRepo
    TokenRepo --> TokenService : return saved token
    deactivate TokenRepo
    TokenService --> Service : return token
    deactivate TokenService
    Service -> EmailService : sendConfirmationEmail(email, token)
    Service --> Controller : "Subscription pending confirmation"
    Controller --> User : "Subscription pending confirmation"
    end
end

deactivate Service
deactivate Controller

@enduml
